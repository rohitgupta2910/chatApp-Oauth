<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Chat App</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;500;600&display=swap" rel="stylesheet" />
    <style>
      body {
        font-family: 'Poppins', sans-serif;
      }
    </style>
  </head>

  <body class="h-screen bg-gradient-to-br from-indigo-700 via-purple-700 to-pink-600 p-4">
    <div class="flex h-full max-w-7xl mx-auto backdrop-blur-lg bg-white/10 rounded-3xl shadow-2xl overflow-hidden border border-white/20">
      
      <!-- Left Sidebar -->
      <div class="w-1/3 border-r border-white/10 overflow-y-auto">
        <div class="sticky top-0 bg-black/20 backdrop-blur-xl p-6 border-b border-white/10 z-10">
          <div class="flex justify-between items-center">
            <h2 class="text-2xl font-semibold text-white">Online Users</h2>
            <a
              href="/logout"
              class="px-4 py-2 bg-red-500/90 text-white rounded-lg hover:bg-red-600/90 transition duration-200"
            >
              Logout
            </a>
          </div>
        </div>

        <div class="p-4 space-y-2">
          <% users.forEach(function(user) { %>
            <div
              onclick="updateReceiver('<%= user._id %>')"
              class="p-4 rounded-lg bg-white/5 hover:bg-white/10 text-white cursor-pointer transition-all duration-200"
            >
              <p class="font-medium"><%= user.displayName %></p>
            </div>
          <% }) %>
        </div>
      </div>

      <!-- Chat Section -->
      <div class="w-2/3 flex flex-col bg-white/5 backdrop-blur-xl">
        <div class="p-6 border-b border-white/10 bg-black/10">
          <h2 class="text-2xl font-semibold text-white" id="chatTitle">Chat Area</h2>
        </div>

        <div class="flex-1 p-6 overflow-y-auto flex flex-col gap-3" id="messageContainer">
          <p class="text-white/70 text-center">Select a user to start chatting</p>
        </div>

        <form id="messageForm" class="p-4 border-t border-white/10 bg-black/10">
          <div class="flex gap-2">
            <input
              type="text"
              id="messageInput"
              placeholder="Type your message..."
              class="flex-1 px-4 py-3 bg-white/10 border border-white/20 rounded-lg text-white placeholder-white/50 focus:outline-none focus:ring-2 focus:ring-white/50 transition-all duration-300"
              required
            />
            <button
              type="submit"
              class="px-6 py-3 bg-gradient-to-r from-yellow-300 to-yellow-500 text-black font-medium rounded-lg hover:opacity-90 transition-all duration-300"
            >
              Send
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Scripts -->
    <script>
      const users = <%- JSON.stringify(users) %>;
      const currentUser = <%- JSON.stringify(currentUser) %>;
      const currentUserId = currentUser._id;
      let receiverId = users[0]?._id || null;

      const socket = io();
      socket.emit('join', currentUserId);

      async function updateReceiver(selectedId) {
        receiverId = selectedId;
        const selectedUser = users.find(user => user._id === selectedId);
        if (selectedUser) {
          document.title = `${selectedUser.displayName}`;
          document.getElementById('chatTitle').textContent = `${selectedUser.displayName}`;
        }

        try {
          const response = await fetch(`/getChat/${selectedId}`);
          const result = await response.json();
          if (result.allChats) showInitialChats(result.allChats, currentUserId);
        } catch (error) {
          console.error("Error fetching chats:", error);
        }
      }

      function showInitialChats(chats, currentUserId) {
        const chatBox = document.querySelector("#messageContainer");
        chatBox.innerHTML = "";
        chats.forEach((chat) => {
          const messageDiv = document.createElement("div");
          messageDiv.classList.add("max-w-[70%]", "p-3", "rounded-xl", "text-sm", "shadow", "break-words");

          if (chat.senderId === currentUserId) {
            messageDiv.classList.add("bg-blue-500", "text-white", "self-end");
          } else {
            messageDiv.classList.add("bg-white", "text-black", "self-start");
          }

          messageDiv.textContent = chat.message;
          chatBox.appendChild(messageDiv);
        });

        chatBox.scrollTop = chatBox.scrollHeight;
      }

      socket.on("receive-message", async (data) => {
        try {
          const response = await fetch(`/getChat/${receiverId}`);
          const result = await response.json();
          if (result.allChats) showInitialChats(result.allChats, currentUserId);
        } catch (error) {
          console.error("Error fetching updated chats:", error);
        }
      });

      const form = document.getElementById("messageForm");
      const input = document.getElementById("messageInput");

      form.addEventListener("submit", function (e) {
        e.preventDefault();
        const message = input.value.trim();

        if (message && receiverId) {
          const messageDiv = document.createElement("div");
          messageDiv.classList.add(
            "max-w-[70%]",
            "p-3",
            "rounded-xl",
            "bg-blue-500",
            "text-white",
            "self-end",
            "text-sm",
            "shadow",
            "break-words"
          );
          messageDiv.textContent = message;
          document.querySelector("#messageContainer").appendChild(messageDiv);

          socket.emit("send-message", {
            message: message,
            receiverId: receiverId,
            senderId: currentUserId,
          });

          input.value = "";
          messageDiv.scrollIntoView({ behavior: "smooth" });
        }
      });
    </script>
  </body>
</html>
